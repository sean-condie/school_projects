# Lab Assignment 3 - Genome Mapping and QC
# -----------------------------------------------
# Student Name:    Sean Condie
# Course:          FRSC4800 Bioinformatics
# Submission Date: November 12th, 2021
# -----------------------------------------------

#Sources:
#http://protists.ensembl.org/Dictyostelium_discoideum/Info/Index
#https://www.ncbi.nlm.nih.gov/sra/SRX8658228[accn]
#https://www.ncbi.nlm.nih.gov/sra/SRX8658218[accn]


#1.

#download the Dictyostelium discoideum genome
wget http://ftp.ensemblgenomes.org/pub/protists/release-51/fasta/dictyostelium_discoideum/dna/Dictyostelium_discoideum.dicty_2.7.dna.toplevel.fa.gz

#download the checksums
wget http://ftp.ensemblgenomes.org/pub/protists/release-51/fasta/dictyostelium_discoideum/dna/CHECKSUMS

#compare the checksums
#ensembl uses the default "sum" program in unix to calculate their checksum values
sum Dictyostelium_discoideum.dicty_2.7.dna.toplevel.fa.gz

#STDOUT
#17649  9231

#search the checksum file for the result 
grep "17649  9231" CHECKSUMS

#STDOUT
#17649  9231 Dictyostelium_discoideum.dicty_2.7.dna.toplevel.fa.gz

#ANS: We can see that the checksums match meaning there were no errors in the download, and therefore no need to check for differences

#unzip the file, 'd' for decompress and 'k' to keep the original compressed file
gzip -dk Dictyostelium_discoideum.dicty_2.7.dna.toplevel.fa.gz 

#We can again ensure data entegrity using the following command
diff Dictyostelium_discoideum.dicty_2.7.dna.toplevel.fa <(zcat Dictyostelium_discoideum.dicty_2.7.dna.toplevel.fa.gz)

#STDOUT: There was no output from this code, which is good. Any STDOUT would be the differences.
#If there is no STDOUT from this code then there is no differences between the contents of the zipped file, and the unzipped file. 

#Create a symbolic link the the picard.jar program
ln -s /home/classdata/Programs/picard.jar

#Index the genome for the BWA aligner
bwa index -a bwtsw Dictyostelium_discoideum.dicty_2.7.dna.toplevel.fa

#STDOUT
#[bwa_index] Pack FASTA... 0.41 sec
#[bwa_index] Construct BWT for the packed sequence...
#[BWTIncCreate] textLength=68268908, availableWord=16803244
#[BWTIncConstructFromPacked] 10 iterations done. 27717036 characters processed.
#[BWTIncConstructFromPacked] 20 iterations done. 51203180 characters processed.
#[bwt_gen] Finished constructing BWT in 29 iterations.
#[bwa_index] 25.69 seconds elapse.
#[bwa_index] Update BWT... 0.21 sec
#[bwa_index] Pack forward-only FASTA... 0.20 sec
#[bwa_index] Construct SA from BWT and Occ... 12.06 sec
#[main] Version: 0.7.12-r1039
#[main] CMD: bwa index -a bwtsw Dictyostelium_discoideum.dicty_2.7.dna.toplevel.fa
#[main] Real time: 39.052 sec; CPU: 38.572 sec

#Generate a fasta file index
samtools faidx Dictyostelium_discoideum.dicty_2.7.dna.toplevel.fa

#Create a sequence dictionary
java -jar picard.jar CreateSequenceDictionary REFERENCE=Dictyostelium_discoideum.dicty_2.7.dna.toplevel.fa OUTPUT=Dictyostelium_discoideum.dicty_2.7.dna.toplevel.dict

#run assembly stats to get the N50, genome size, and the number of scaffolds
/home/classdata/Programs/assembly-stats/assembly-stats Dictyostelium_discoideum.dicty_2.7.dna.toplevel.fa

#STDOUT
#stats for Dictyostelium_discoideum.dicty_2.7.dna.toplevel.fa
#sum = 34134454, n = 39, ave = 875242.41, largest = 8484197
#N50 = 5450249, n = 3
#N60 = 5125352, n = 4
#N70 = 5125352, n = 4
#N80 = 4923596, n = 5
#N90 = 3602379, n = 6
#N100 = 1953, n = 39
#N_count = 23142
#Gaps = 358

#From the output we see that the genome length is 34,134,454 base pairs, with 39 scaffolds. The N50 is 5450249.
#We can compare these values to those found at https://www.ebi.ac.uk/ena/browser/view/GCA_000004695.1?show=blobtoolkit
#Genome size: 34134454
#N50: 5450249
#Count [# of contigs]: 39 
#They all match so we can be confident that our data has retained it's integrity.

#What is an N50 value, and why is the N50 and number of scaffolds important?
#ANS: After sorting by contig/scaffold length, the N50 value is the size of the contig/scaffold that is found at the 50% point in the genome, sometimes refered to as median scaffold size. 
#This value is important in assesing the quallity of the assembly since smaller contigs generally mean more gaps in the sequencing.
#With a large N50 we can feel confident that we can find biological importance contained within individual contigs. 
#Successfuly generating very large contig sizes is a good indication that the assembly was of high quality. 

#2.

#Download 2 .fq files to map to the genome, we use the --split-files tag in order to seperate the forward and reverse reads into individual .fastq files
#Fruiting stage DNA
/home/classdata/Programs/sratoolkit.2.8.2-1-ubuntu64/bin/fastq-dump --split-files SRR12137032
#Vegitative stage DNA
/home/classdata/Programs/sratoolkit.2.8.2-1-ubuntu64/bin/fastq-dump --split-files SRR12137022

#Make a directory to store the read quality data
mkdir FastQC_Data

#Run fastqc on every .fastq file to generate quality reports for each, specifying the output directory as the previously created directory.
/home/classdata/Programs/FastQC/fastqc -o FastQC_Data/. *.fastq

#After opening the HTML files in my browser, it seems that the data has already been treated for primer ditection and repeats.

#Create aligned .sam files for each .fastq file against the reference genome
#First set of fastq files
bwa mem Dictyostelium_discoideum.dicty_2.7.dna.toplevel.fa SRR12137022_1.fastq SRR12137022_2.fastq > SRR12137022_aligned_pairs.sam
#Second set of fastq files
bwa mem Dictyostelium_discoideum.dicty_2.7.dna.toplevel.fa SRR12137032_1.fastq SRR12137032_2.fastq > SRR12137032_aligned_pairs.sam

#Convert .sam files to .bam files
samtools view -bT Dictyostelium_discoideum.dicty_2.7.dna.toplevel.fa SRR12137022_aligned_pairs.sam > SRR12137022_aligned_pairs.bam 
samtools view -bT Dictyostelium_discoideum.dicty_2.7.dna.toplevel.fa SRR12137032_aligned_pairs.sam > SRR12137032_aligned_pairs.bam 

#Sort the .bam files 
samtools sort SRR12137022_aligned_pairs.bam -o sorted_SRR12137022_aligned_pairs.bam 
samtools sort SRR12137032_aligned_pairs.bam -o sorted_SRR12137032_aligned_pairs.bam 

#Make bam index
samtools index sorted_SRR12137022_aligned_pairs.bam sorted_SRR12137022_aligned_pairs.bai
samtools index sorted_SRR12137032_aligned_pairs.bam sorted_SRR12137032_aligned_pairs.bai

#check the summary of the alignments
samtools flagstat sorted_SRR12137022_aligned_pairs.bam

#STDOUT
#42613386 + 0 in total (QC-passed reads + QC-failed reads)
#0 + 0 secondary
#144644 + 0 supplementary
#0 + 0 duplicates
#28630209 + 0 mapped (67.19% : N/A)
#42468742 + 0 paired in sequencing
#21234371 + 0 read1
#21234371 + 0 read2
#28103016 + 0 properly paired (66.17% : N/A)
#28290970 + 0 with itself and mate mapped
#194595 + 0 singletons (0.46% : N/A)
#102562 + 0 with mate mapped to a different chr
#44805 + 0 with mate mapped to a different chr (mapQ>=5)

samtools flagstat sorted_SRR12137032_aligned_pairs.bam

#STDOUT
#71246740 + 0 in total (QC-passed reads + QC-failed reads)
#0 + 0 secondary
#886686 + 0 supplementary
#0 + 0 duplicates
#50497281 + 0 mapped (70.88% : N/A)
#70360054 + 0 paired in sequencing
#35180027 + 0 read1
#35180027 + 0 read2
#48678368 + 0 properly paired (69.18% : N/A)
#49387062 + 0 with itself and mate mapped
#223533 + 0 singletons (0.32% : N/A)
#532900 + 0 with mate mapped to a different chr
#253567 + 0 with mate mapped to a different chr (mapQ>=5)

#Quantify your mapping success and explain whether you think it was successful or not.
#ANS: We can see that both mappings had close to 70% mapping success with all reads passing QC. From my research this is an average result so I would consider it to be a success overall.
#We could rerun the pipeline by first runing the .fastq files through a program like seqtk but since we have no reads failing QC I doubt this would help much since it has likely already been filtered for bad reads and removal of primers.

#What is genome coverage? 
#Genome coverage is the average nnumber of times each base pair was sampled. It is found using the Lander/Waterman equation: (number of reads x read length)/genome size
#For SRR12137022, coverage would be (42613386*150)/34134454 = ~187x Coverage
#For SRR12137032, coverage would be (71246740*150)/34134454 = ~313x Coverage

#Create a plot of coverage for one chromosome / scaffold in R

#Collect coverage data using bedtools, -d indecates that we want every base pair, not several binned together.
bedtools genomecov -ibam sorted_SRR12137022_aligned_pairs.bam -d > SRR12137022_coverage.txt
bedtools genomecov -ibam sorted_SRR12137032_aligned_pairs.bam -d > SRR12137032_coverage.txt

#These text files are then loaded into R and filtered for the largest non-chromosome contig (CH709182) to see if we might be able to see if there is a reason it hasen't been mapped to a chromosome.
#Rstudio Code:
	#SRR_22 <- read.table("SRR12137022_coverage.txt", sep="\t")
	#SRR_32 <- read.table("SRR12137032_coverage.txt", sep="\t")
	#
	#colnames(SRR_22) <- c("Scaffold", "Location", "Coverage")
	#colnames(SRR_32) <- c("Scaffold", "Location", "Coverage")
	#
	#library(dplyr)
	#
	#SRR_22_chr1 <- filter (SRR_22, Scaffold == "CH709182")
	#SRR_32_chr1 <- filter (SRR_32, Scaffold == "CH709182")
	#
	#plot(SRR_22_chr1$Coverage~SRR_22_chr1$Location, pch='.', main="CH709182 coverage for SRR12137022", xlab="Position (base pair)", ylab = "Coverage")
	#plot(SRR_32_chr1$Coverage~SRR_32_chr1$Location, pch='.', main="CH709182 coverage for SRR12137032", xlab="Position (base pair)", ylab = "Coverage")

#The plots were then saved and uploaded to the server named, SRR12137022_coverage.png and SRR12137032_coverage.png